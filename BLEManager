//
//  BLEManager.swift
//  EMG-ble-kth
//

import Foundation
import CoreBluetooth
import QuartzCore // for time
import SwiftUI // Required for Alert

struct TimestampedData: Comparable {
    let timestamp: CFTimeInterval
    let values: [Float]
    
    // Conform to Comparable
    static func < (lhs: TimestampedData, rhs: TimestampedData) -> Bool {
        return lhs.timestamp < rhs.timestamp
    }

    static func == (lhs: TimestampedData, rhs: TimestampedData) -> Bool {
        return lhs.timestamp == rhs.timestamp
    }
}

struct Peripheral: Identifiable {
    let id: Int
    let name: String
    let rssi: Int
}

// Priority Queue Implementation
struct PriorityQueue<T: Comparable> {
    private var heap: [T]
    private let ordered: (T, T) -> Bool

    init(ascending: Bool = true, startingValues: [T] = []) {
        self.ordered = ascending ? { $0 < $1 } : { $0 > $1 }
        self.heap = startingValues
        buildHeap()
    }

    private mutating func buildHeap() {
        for index in stride(from: (heap.count / 2 - 1), through: 0, by: -1) {
            heapifyDown(from: index)
        }
    }

    var count: Int { heap.count }
    var isEmpty: Bool { heap.isEmpty }

    mutating func push(_ element: T) {
        heap.append(element)
        heapifyUp(from: heap.count - 1)
    }

    mutating func pop() -> T? {
        guard !heap.isEmpty else { return nil }
        heap.swapAt(0, heap.count - 1)
        let popped = heap.removeLast()
        heapifyDown(from: 0)
        return popped
    }

    private mutating func heapifyUp(from index: Int) {
        var child = index
        var parent = (child - 1) / 2
        while child > 0 && ordered(heap[child], heap[parent]) {
            heap.swapAt(child, parent)
            child = parent
            parent = (child - 1) / 2
        }
    }

    private mutating func heapifyDown(from index: Int) {
        var parent = index
        while true {
            let left = 2 * parent + 1
            let right = 2 * parent + 2
            var candidate = parent

            if left < heap.count && ordered(heap[left], heap[candidate]) {
                candidate = left
            }
            if right < heap.count && ordered(heap[right], heap[candidate]) {
                candidate = right
            }
            if candidate == parent { return }
            heap.swapAt(parent, candidate)
            parent = candidate
        }
    }

    func peek() -> T? {
        return heap.first
    }
}

class BLEManager: NSObject, ObservableObject, CBCentralManagerDelegate {
    var myCentral: CBCentralManager!
    @Published var BLEisOn = false
    @Published var BLEPeripherals = [Peripheral]()
    @Published var isConnected = false

    
    var CBPeripherals = [CBPeripheral]()
    var emgCharacteristic: CBCharacteristic?
    var emg: emgGraph
    private var droppedPackets: Int = 0
    private var totalPackets: Int = 0
    private let packetLossThreshold: Float = 0.1 // 10% packet loss threshold

    // RMS Buffers and Calculation
    private var emgBuffer: [Float] = [] // Buffer for 0.1-second RMS calculation
    private let windowSize = 1 // 0.1 seconds at 10 Hz sampling rate
    @Published var currentRMS: Float = 0.0 // Latest 0.1-second RMS
    @Published var rmsHistory: [Float] = [] // Store historical 0.1-second RMS values

    private var oneSecondBuffer: [Float] = [] // Buffer for 1-second RMS calculation
    private let oneSecondWindowSize = 10 // 1 second at 10 Hz sampling rate
    @Published var oneSecondRMS: Float = 0.0 // Latest 1-second RMS

    ///process BLE data in the background
    private let dataQueue = DispatchQueue(label: "com.emg.ble.data")

    var notificationTimestamps: [CFTimeInterval] = [] // Stores timestamps for debugging
    var notificationSamples: [Int] = [] // Stores sample counts per notification

    var firstSampleTimestamp: CFTimeInterval? // Stores first timestamp as reference
    var expectedNextTimestamp: CFTimeInterval? // Expected timestamp for next sample

    private var receivedValuesPerTimestamp: [CFTimeInterval: [Float]] = [:] // Rolling buffer for tracking received values
    private let rollingBufferLimit = 500 // Stores data for the last 10 seconds (assuming 10 Hz updates)

    var reconnectionAttempts: Int = 0
    let maxReconnectionAttempts = 2
    
    // Declare total packets received and expected
    private var totalPacketsReceived = 0
    private var totalPacketsExpected = 0
    
    // calculaate adquisiton ratio variables
    private var lastSARUpdateTime: CFTimeInterval = CACurrentMediaTime()
    private var lastPrintTime: CFTimeInterval = CACurrentMediaTime()
    private var lastSARValue: Double = 100.0

    // Buffer for storing EMG data with timestamps (each entry includes data and the timestamp)
    private var timestampBuffer = PriorityQueue<TimestampedData>(ascending: true, startingValues: [])
    private let bufferLimit = 500 // Limit the buffer size to 500 values, in case  data comes in bursts
    
    ///process BLE data in the background
    private let emgProcessingQueue = DispatchQueue(label: "com.emg.processing", qos: .userInitiated)
    
    //disconnect device
    @Published var connectionErrorMessage: String? = nil
    @Published var showAlert = false // Controls the visibility of the alert
    @Published var alertMessage = "" // Stores the alert message

    init(emg: emgGraph) {
        self.emg = emg
        super.init()
        myCentral = CBCentralManager(delegate: self, queue: nil)
    }

    func centralManagerDidUpdateState(_ central: CBCentralManager) {
        DispatchQueue.main.async {
            self.BLEisOn = (central.state == .poweredOn)
        }
    }
    func checkBluetoothStatus() {
        if !BLEisOn {
            print("‚ö†Ô∏è Bluetooth is not on. Please enable Bluetooth.")
            return
        }
    }

    func checkBluetoothPermissions() {
        switch CBManager.authorization {
        case .allowedAlways:
            print("Bluetooth is allowed")
        case .restricted, .denied:
            print("Bluetooth access denied")
        default:
            print("Bluetooth authorization pending")
        }
    }

    func startScanning() {
        guard !isConnected else {
            print("üîπ Already connected, skipping scanning.")
            return
        }
        print("üîç Start Scanning")
        
        DispatchQueue.main.async {
            self.BLEPeripherals.removeAll()  // ‚úÖ Clear ghost sensors before scanning
            self.CBPeripherals.removeAll()
        }
        
        myCentral.scanForPeripherals(withServices: nil, options: nil)
    }


    func stopScanning() {
        print("Stop Scanning")
        myCentral.stopScan()
    }

    func connectSensor(p: Peripheral) {
        // Check Bluetooth status before attempting connection
        checkBluetoothStatus()
        
        // Ensure we're not already connected and the peripheral exists
        guard p.id < CBPeripherals.count, !isConnected else {
            print("üîπ Already connected, skipping connection attempt.")
            return
        }
        // Reset the reconnection attempts when manually reconnecting
        self.reconnectionAttempts = 0
        
        // Stop scanning if we're currently scanning
        if myCentral.isScanning {
            myCentral.stopScan()
        }

        // Debugging log for the connection attempt
        print("üîÑ Connecting to: \(CBPeripherals[p.id].name ?? "Unknown")")

        // Get the peripheral we're trying to connect to
        let peripheral = CBPeripherals[p.id]
        myCentral.connect(peripheral, options: nil)

        // Safety timeout: If the connection hasn't succeeded in 5 seconds, cancel and retry
        DispatchQueue.global(qos: .background).asyncAfter(deadline: .now() + 10.0) {
            if !self.isConnected {
                // Timeout reached, cancel connection attempt
                print("‚ùå Connection attempt timed out. Cancelling attempt and retrying.")
                self.myCentral.cancelPeripheralConnection(peripheral)

                DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
                    // If there are more reconnection attempts left, try reconnecting
                    if self.reconnectionAttempts < self.maxReconnectionAttempts {
                        self.reconnectionAttempts += 1
                        print("üîÑ Retrying reconnection (\(self.reconnectionAttempts)/\(self.maxReconnectionAttempts))...")
                        self.myCentral.connect(peripheral, options: nil)
                    } else {
                        // Max attempts reached, stop retrying
                        print("üî¥ Max reconnection attempts reached. Stopping reconnection.")
                        self.alertMessage = "Check device battery and Bluetooth stability."
                        self.showAlert = true
                    }
                }
            }
        }
    }


    // Connecting to the correct device - ANR Corp
    func centralManager(_ central: CBCentralManager, didDiscover peripheral: CBPeripheral, advertisementData: [String: Any], rssi RSSI: NSNumber) {
        if let manufacturerData = advertisementData[CBAdvertisementDataManufacturerDataKey] as? Data,
           manufacturerData.count >= 2 {
            let companyID = UInt16(manufacturerData[1]) << 8 | UInt16(manufacturerData[0]) // Little-endian
            if companyID != 0x05DA {
                print("Skipping non-ANR device")
                return
            }
        } else {
            print("No Manufacturer Specific Data found, skipping device.")
            return
        }

        let peripheralName = advertisementData[CBAdvertisementDataLocalNameKey] as? String ?? "Unknown"
        print("Discovered device: \(peripheralName) with RSSI: \(RSSI.intValue)")

        let newPeripheral = Peripheral(id: BLEPeripherals.count, name: peripheralName, rssi: RSSI.intValue)
        DispatchQueue.main.async {
            self.BLEPeripherals.append(newPeripheral)
        }
        CBPeripherals.append(peripheral)

        print("Added device: \(peripheralName) with RSSI: \(RSSI.intValue)")
    }

    func centralManager(_ central: CBCentralManager, didConnect peripheral: CBPeripheral) {
        print("‚úÖ Connected to \(peripheral.name ?? "Unknown Device")")

        DispatchQueue.main.async {
            self.isConnected = true
        }

        myCentral.stopScan()
        // ‚úÖ Assign delegate only if it‚Äôs not already set
            if peripheral.delegate !== self {
                peripheral.delegate = self
                print("üîÑ Reassigned peripheral delegate after reconnection.")
            } else {
                print("‚ö° Peripheral delegate was already set, skipping reassignment.")
            }

        peripheral.discoverServices(nil)  // ‚úÖ Rediscover services to restore notifications
        print("üîÑ Reassigned peripheral delegate after reconnection.")

        // ‚úÖ Ensure notifications are re-enabled for EMG characteristic after reconnection
        if let emgCharacteristic = self.emgCharacteristic {
            peripheral.setNotifyValue(true, for: emgCharacteristic)
            print("‚úÖ Notifications re-enabled for \(emgCharacteristic.uuid)")
        } else {
            print("‚ö†Ô∏è No EMG characteristic found yet. Waiting for discovery...")
        }
    }


    // if the device is disconnected wait 1 second and try to restablish connection
    func centralManager(_ central: CBCentralManager, didDisconnectPeripheral peripheral: CBPeripheral, error: Error?) {
        print("‚ùå Disconnected from \(peripheral.name ?? "Unknown Device")")

        // Update UI to reflect the disconnected state
        DispatchQueue.main.async {
            self.isConnected = false
        }

        // Prevent data loss by keeping recent timestamps
        DispatchQueue.global(qos: .background).async {
            self.receivedValuesPerTimestamp = self.receivedValuesPerTimestamp.filter { CACurrentMediaTime() - $0.key < 5 }
            print("üîÑ Keeping only recent timestamps to prevent data loss after reconnection")
        }
        // Prevent infinite reconnection attempts
        if reconnectionAttempts >= maxReconnectionAttempts {
            print("üî¥ Max reconnection attempts reached. Stopping reconnection.")
            
            // Show alert when max reconnection attempts are reached
            DispatchQueue.main.async {
                self.alertMessage = "Max reconnection attempts reached. Verify Bluetooth connection and device battery."
                self.showAlert = true
                
            }
            return
        }
        // Increment reconnection attempt counter
        reconnectionAttempts += 1
        print("üîÑ Attempting to reconnect (\(reconnectionAttempts)/\(maxReconnectionAttempts))...")

        // Prevent duplicate reconnection logs
        if reconnectionAttempts == 1 {
            print("üîÑ First reconnection attempt. Initiating reconnection sequence.")
        } else {
            print("‚ö†Ô∏è Reconnection attempt (\(reconnectionAttempts)/\(maxReconnectionAttempts)) in progress...")
        }
        // Reduce wait time for faster reconnection (2 seconds before retry)
        DispatchQueue.global(qos: .background).asyncAfter(deadline: .now() + 2.0) {
            self.myCentral.connect(peripheral, options: nil)
        }
        // Trigger the UI to reflect ongoing reconnection attempts
        DispatchQueue.main.async {
            // Update the alert message to show reconnection attempts in progress
            self.alertMessage = "Attempting to reconnect... (\(self.reconnectionAttempts)/\(self.maxReconnectionAttempts))"
            self.showAlert = true
        }
    }

    // SAR
    func calculateSignalAcquisitionRatio() {
        let now = CACurrentMediaTime()
        
        // Ensure SAR calculation only happens once per second
        if now - lastSARUpdateTime < 1.0 { return }
        
        let sar = (totalPacketsReceived > 0) ? (Double(totalPacketsReceived) / Double(totalPacketsExpected)) * 100 : 0.0
        lastSARUpdateTime = now

        // Print logic based on SAR value:
        if sar == 100.0 {
            if lastSARValue != 100.0 || now - lastPrintTime >= 10.0 {
                print("üì° Signal Acquisition Ratio (SAR): \(sar)% ‚úÖ (Perfect signal)")
                lastPrintTime = now
            }
        } else if sar < 10.0 {
            // If SAR is below 10%, print every cycle until it reaches 80%
            print("‚ö†Ô∏è Low Signal Acquisition Ratio (SAR): \(sar)% ‚ùå - Check connection")
            lastPrintTime = now
        } else if sar < 80.0 {
            // Continue printing every cycle until SAR is 80%
            print("‚ö†Ô∏è SAR Recovering: \(sar)%")
            lastPrintTime = now
        } else {
            // Normal case: Print every second
            if now - lastPrintTime >= 1.0 {
                print("üì° Signal Acquisition Ratio (SAR): \(sar)%")
                lastPrintTime = now
            }
        }
        
        lastSARValue = sar
    }
    func normalizeTimestamp(_ timestamp: CFTimeInterval, precision: Int = 1) -> CFTimeInterval {
        let multiplier = pow(10.0, Double(precision))
        return round(timestamp * multiplier) / multiplier
    }

    func processAndAppendEMGData(_ rawEMGData: [Float], timestamp: CFTimeInterval) {
        totalPackets += 1
        if rawEMGData.isEmpty {
            droppedPackets += 1
        }

        // ‚úÖ Use a larger rolling buffer to prevent early removals
        timestampBuffer.push(TimestampedData(timestamp: timestamp, values: rawEMGData.isEmpty ? [0.001] : rawEMGData))

        // ‚úÖ Only remove excess timestamps beyond `bufferLimit`
        while timestampBuffer.count > bufferLimit {
            _ = timestampBuffer.pop()
        }

        let sanitizedData = rawEMGData.isEmpty ? [0.001] : rawEMGData.map { $0.isFinite ? $0 : 0.0 }
        let sanitizedCGFloatData = sanitizedData.map { CGFloat($0) }

        DispatchQueue.main.async { [weak self] in
            guard let self = self else { return }
            let normalizedTimestamp = self.normalizeTimestamp(timestamp)
            self.emg.append(values: sanitizedCGFloatData, timestamp: normalizedTimestamp)

            // ‚úÖ Debug: Confirm UI Update T rigger
            print("üîÑ Triggering UI refresh after appending BLE data.")
            self.emg.objectWillChange.send()
        }
        
    }

    // interpolation when packet lost and under adquisiton ratio is 10%
    func reconstructDataStream() {
        guard droppedPackets > 0, Float(droppedPackets) / Float(totalPackets) > packetLossThreshold else {
            return
        }
        print("üîÑ Buffer before reconstruction: \(timestampBuffer.count) samples")

        var reconstructedData: [TimestampedData] = []
        while let entry = timestampBuffer.pop() {
            if !reconstructedData.isEmpty {
                let previous = reconstructedData.last!
                let gap = entry.timestamp - previous.timestamp
                
                if gap > 0.1 { // Missing data detected
                    let interpolatedValue = (entry.values.first! + previous.values.first!) / 2
                    let interpolatedTimestamp = previous.timestamp + 0.1
                    reconstructedData.append(TimestampedData(timestamp: interpolatedTimestamp, values: [interpolatedValue]))
                }
            }
            reconstructedData.append(entry)
        }

        // Push reconstructed data back
        for entry in reconstructedData {
            timestampBuffer.push(entry)
        }
    }

    func updateShortTermRMS(with newValues: [Float]) {
        dataQueue.async { [weak self] in
            guard let self = self else { return }
            let validValues = newValues.filter { $0.isFinite }
            self.emgBuffer.append(contentsOf: validValues)
            let rmsDelta = self.calculateRMS(from: validValues)
            self.currentRMS = sqrt(pow(self.currentRMS, 2) * Float(self.emgBuffer.count - validValues.count) + pow(rmsDelta, 2)) / Float(self.emgBuffer.count)
        }
    }


    func calculateRMS(from samples: [Float]) -> Float {
        let validSamples = samples.filter { $0.isFinite }
        guard !validSamples.isEmpty else { return 0.0 }
        let squaredSum = validSamples.reduce(0.0) { $0 + $1 * $1 }
        return sqrt(squaredSum / Float(validSamples.count))
    }
}

extension BLEManager: CBPeripheralDelegate {
    func peripheral(_ peripheral: CBPeripheral, didDiscoverServices error: Error?) {
        guard let services = peripheral.services else { return }
        for service in services {
            peripheral.discoverCharacteristics(nil, for: service)
        }
    }

    func peripheral(_ peripheral: CBPeripheral, didDiscoverCharacteristicsFor service: CBService, error: Error?) {
        if let characteristics = service.characteristics {
            for characteristic in characteristics {
                if characteristic.uuid == CBUUID(string: "2A58") { // Change to the actual UUID of your EMG characteristic
                    self.emgCharacteristic = characteristic
                    peripheral.setNotifyValue(true, for: characteristic) // Enable notifications
                    print("‚úÖ EMG Characteristic Found: \(characteristic.uuid)")
                }
            }
        }
    }


    // Packet loss handling and timastamps
    func peripheral(_ peripheral: CBPeripheral, didUpdateValueFor characteristic: CBCharacteristic, error: Error?) {
        if let error = error {
            print("Error updating value for characteristic: \(error.localizedDescription)")
            return
        }

        switch characteristic.uuid {
        case CBUUID(string: "2A58"): // EMG Data
            guard let characteristicData = characteristic.value, characteristicData.count % 2 == 0 else {
                print("Error: Invalid data length for EMG characteristic")
                return
            }

            let systemTimestamp = CACurrentMediaTime()

            var rawValues: [Float] = []
            for index in stride(from: 0, to: characteristicData.count, by: 2) {
                let rawValue = UInt16(characteristicData[index]) | (UInt16(characteristicData[index + 1]) << 8)
                let normalizedValue = Float(rawValue) / 1000.0
                rawValues.append(normalizedValue.isFinite ? normalizedValue : 0.0)
            }

            if firstSampleTimestamp == nil || expectedNextTimestamp == nil {
                firstSampleTimestamp = systemTimestamp
                expectedNextTimestamp = firstSampleTimestamp
            } else if abs(systemTimestamp - expectedNextTimestamp!) > 1.0 {
                // Large gap detected, realign timestamps
                print("‚ö†Ô∏è Large gap detected after reconnection. Realigning expected timestamp.")
                expectedNextTimestamp = systemTimestamp
            }

           
            var timestamp: CFTimeInterval
            if let expectedTime = expectedNextTimestamp {
                let timeDifference = systemTimestamp - expectedTime
                if abs(timeDifference) > 0.8 {
                    print("‚ö†Ô∏è Packet loss detected! Inserting 0.0 values.")
                    while expectedNextTimestamp! + 0.1 < systemTimestamp {
                        if receivedValuesPerTimestamp[expectedNextTimestamp!] == nil {
                            receivedValuesPerTimestamp[expectedNextTimestamp!] = [0.0]
                            totalPacketsExpected += 1
                        }
                        expectedNextTimestamp! += 0.1
                    }
                }
                timestamp = normalizeTimestamp(expectedTime)
                expectedNextTimestamp = expectedTime + 0.1
            } else {
                timestamp = normalizeTimestamp(systemTimestamp)
                expectedNextTimestamp = systemTimestamp + 0.1
            }

            receivedValuesPerTimestamp[timestamp] = rawValues
            totalPacketsReceived += 1
            totalPacketsExpected += 1

            if receivedValuesPerTimestamp.count >= rollingBufferLimit {
                let oldestKey = receivedValuesPerTimestamp.keys.sorted().first!
                print("üîÑ Removing oldest timestamp: \(oldestKey) to prevent buffer overflow")
                receivedValuesPerTimestamp.removeValue(forKey: oldestKey)
            }

            print("üìä Timestamp: \(timestamp) | Received \(rawValues.count) EMG samples")
            calculateSignalAcquisitionRatio()
            reconstructDataStream()
            DispatchQueue.main.async {
                self.processAndAppendEMGData(rawValues, timestamp: timestamp)
            }

        default:
            print("Unhandled characteristic UUID: \(characteristic.uuid)")
        }
    }
}


