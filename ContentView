import SwiftUI
import UniformTypeIdentifiers

struct ContentView: View {
    @StateObject var emgGraph: emgGraph
    @StateObject var bleManager: BLEManager
    @State private var showingExporter = false
    @State private var isExporting = false
    @State var file_content: TextFile = TextFile(initialText: "")
    @State private var showingDeviceSelection = false
    @State private var isCalibrating = false  // for calibration
    @State private var calibrationTimeRemaining = 10 // for calibration
    
//cutomized button blue corner and then changes tto grey when is clicked on it
    struct HighlightButtonStyle: ButtonStyle {
        func makeBody(configuration: Configuration) -> some View {
            configuration.label
                .padding(6) // Reduce padding
                .frame(width: 110, height: 40) // ‚úÖ Force all buttons to the same size
                .background(configuration.isPressed ? Color.gray.opacity(0.5) : Color.blue.opacity(0.8))
                .cornerRadius(10)
                .foregroundColor(.white)
                .overlay(
                    RoundedRectangle(cornerRadius: 10)
                        .stroke(configuration.isPressed ? Color.gray : Color.blue, lineWidth: 2)
                )
                .animation(.easeInOut(duration: 0.2), value: configuration.isPressed)
                .lineLimit(1) // ‚úÖ Prevents multi-line truncation
                .minimumScaleFactor(0.6) // ‚úÖ Shrinks text instead of truncating
                .fixedSize(horizontal: false, vertical: true) // ‚úÖ Prevents unwanted expansion
        }
    }




    
    struct TextFile: FileDocument {
        static var readableContentTypes = [UTType.commaSeparatedText]
        var text: String
        
        init(initialText: String = "") {
            self.text = initialText
        }
        
        init(configuration: ReadConfiguration) throws {
            if let data = configuration.file.regularFileContents {
                text = String(decoding: data, as: UTF8.self)
            } else {
                text = ""
            }
        }
        
        func fileWrapper(configuration: WriteConfiguration) throws -> FileWrapper {
            let data = text.data(using: .utf8) ?? Data()
            return FileWrapper(regularFileWithContents: data)
        }
    }
 
    // Function to apply moving average smoothing
    func smoothData(values: [CGFloat], windowSize: Int) -> [CGFloat] {
        var smoothedValues: [CGFloat] = []
        for i in 0..<values.count {
            let start = max(0, i - windowSize / 2)
            let end = min(values.count - 1, i + windowSize / 2)
            let window = values[start...end]
            let average = window.reduce(0, +) / CGFloat(window.count)
            smoothedValues.append(average)
        }
        return smoothedValues
        
    }
   

    // function for calibration button
    func startCalibration() {
        print("üîÑ Starting MVE Calibration...")
        isCalibrating = true
        calibrationTimeRemaining = 10
        emgGraph.startMVECalibration()
        
        Timer.scheduledTimer(withTimeInterval: 1.0, repeats: true) { timer in
            if calibrationTimeRemaining > 0 {
                print("‚è≥ Calibration Ongoing: \(calibrationTimeRemaining)s remaining")
                calibrationTimeRemaining -= 1
            } else {
                timer.invalidate()
                isCalibrating = false
                print("‚úÖ Calibration Complete. Ending MVE Calibration.")
                emgGraph.endMVECalibration()
            }
        }
    }
    
    init(emgGraph: emgGraph, bleManager: BLEManager) {
        _emgGraph = StateObject(wrappedValue: emgGraph)
        _bleManager = StateObject(wrappedValue: bleManager)
    }
    
    var body: some View {
        GeometryReader { geometry in
            VStack(spacing: 10) {
                // Raw EMG Graph
                VStack {
                    // Swapped: iOS 17+ Mode Title Comes First
                    if #available(iOS 17.0, *) {
                        Text("iOS 17+ Mode Active")
                            .onChange(of: emgGraph.values) { oldValue, newValue in
                                DispatchQueue.global(qos: .background).async {
                                    print("üîÑ UI Refresh (onChange): \(newValue.count) points in view.")
                                }
                                DispatchQueue.main.async {
                                    emgGraph.objectWillChange.send()
                                }
                            }
                    } else {
                        Text("iOS 16 or earlier Mode")
                            .onChange(of: emgGraph.values) { newValue in
                                DispatchQueue.global(qos: .background).async {
                                    print("üîÑ UI Refresh (onChange): \(newValue.count) points in view.")
                                }
                                DispatchQueue.main.async {
                                    emgGraph.objectWillChange.send()
                                }
                            }
                    }
                    
                    // Raw EMG Data" Title Comes After iOS Version
                    Text("Raw EMG Data")
                        .font(.headline)
                        .foregroundColor(.blue)
                        .onAppear {
                            print("üîÑ UI Refresh (onAppear): \(emgGraph.values.count) points in view.")
                        }
                    
     
                    // ‚úÖ The Canvas should be OUTSIDE the `if` block to ensure it always renders
                    Canvas { context, size in
                        let smoothedValues = smoothData(values: emgGraph.values, windowSize: 1)
                        let height = size.height
                        let width = size.width
                        let midY = height / 2
                        
                        guard !smoothedValues.isEmpty,
                              !emgGraph.timestamps.isEmpty,
                              smoothedValues.count == emgGraph.timestamps.count else {
                            return
                        }
                        
                        let firstSample = max(0, emgGraph.timestamps.count - 300)
                        let visibleTimestamps = Array(emgGraph.timestamps[firstSample..<emgGraph.timestamps.count])
                        let visibleValues = Array(smoothedValues[firstSample..<smoothedValues.count])
                        
                        guard let minTime = visibleTimestamps.first,
                              let maxTime = visibleTimestamps.last,
                              maxTime > minTime else {
                            print("‚ö†Ô∏è Skipping Canvas draw: Invalid timestamps.")
                            return
                        }
                        
                        let timeRange = maxTime - minTime
                        var path = Path()
                        
                        for (index, value) in visibleValues.enumerated() {
                            let time = visibleTimestamps[index]
                            let x = ((time - minTime) / timeRange) * width
                            let y = midY - (height / 2 * value)
                            
                            if index == 0 {
                                path.move(to: CGPoint(x: x, y: y))
                            } else {
                                path.addLine(to: CGPoint(x: x, y: y))
                            }
                        }
                        
                        context.stroke(path, with: .color(.blue), lineWidth: 1.5)
                    }
                    .frame(height: geometry.size.height / 8)
                }
                
                // 1000 Sample RMS Graph
                VStack {
                    Text("1 second RMS")
                        .font(.headline)
                        .foregroundColor(.green)
                    Canvas { context, size in
                        let height = size.height
                        let width = size.width
                        let midY = height / 2
                        let history = emgGraph.oneSecondRMSHistory.filter { $0.isFinite }
                        
                        guard history.count > 1 else { return }
                        let firstSample = max(0, emgGraph.timestamps.count - history.count)
                        let visibleTimestamps = Array(emgGraph.timestamps[firstSample..<emgGraph.timestamps.count])
                        
                        guard let minTime = visibleTimestamps.first,
                              let maxTime = visibleTimestamps.last,
                              maxTime > minTime else { return }
                        
                        let timeRange = maxTime - minTime
                        var path = Path()
                        
                        for (index, value) in history.enumerated() {
                            let time = visibleTimestamps[index]
                            let x = ((time - minTime) / timeRange) * width
                            let y = midY - (height / 2 * value)
                            
                            if index == 0 {
                                path.move(to: CGPoint(x: x, y: y))
                            } else {
                                path.addLine(to: CGPoint(x: x, y: y))
                            }
                        }
                        
                        context.stroke(path, with: .color(.green), lineWidth: 2.0)
                    }
                    .frame(height: geometry.size.height / 12)
                    
                }
                .padding(.top, 10)
                // %MVE Graph
                VStack {
                    Text("Percentage of MVE")
                        .font(.headline)
                        .foregroundColor(.red)
                    
                    Canvas { context, size in
                        let width = size.width
                        let height = size.height
                        let midY = height / 2
                        
                        guard !emgGraph.percentMVEHistory.isEmpty else { return }
                        
                        var path = Path()
                        let maxPercentMVE = emgGraph.percentMVEHistory.max() ?? 100.0
                        
                        for (index, value) in emgGraph.percentMVEHistory.enumerated() {
                            let x = CGFloat(index) / CGFloat(emgGraph.percentMVEHistory.count) * width
                            let y = midY - (height / 2 * (value / maxPercentMVE))
                            
                            if index == 0 {
                                path.move(to: CGPoint(x: x, y: y))
                            } else {
                                path.addLine(to: CGPoint(x: x, y: y))
                            }
                        }
                        
                        context.stroke(path, with: .color(.red), lineWidth: 1.5)
                    }
                    .frame(height: geometry.size.height / 12)
                }
                .padding(.top, 10)
                
                
                VStack {
                    
                    Text("Current %MVE: \(String(format: "%.2f", emgGraph.percentMVEHistory.last ?? 0.0))%")
                        .font(.headline)
                        .foregroundColor(.green)
                    
                    Text("MVE: \(String(format: "%.2f", emgGraph.mveValue))")
                        .font(.headline)
                        .foregroundColor(.blue)
                    
                }
                
                // BLE Status and Connection
                VStack(spacing: 10) {
                    
                    // BLE Status and Connection
                    if !bleManager.isConnected {
                        VStack {
                            // ‚úÖ Make "Connect to Sensor" TAPABLE using a button
                            Button(action: {
                                showingDeviceSelection = true  // ‚úÖ Now it correctly updates the state
                            }) {
                                Text("Connect to Sensor")
                                    .frame(minWidth: 110, maxWidth: 150) // Ensure text adjusts properly
                                    .fixedSize(horizontal: false, vertical: true)
                            }
                            .buttonStyle(HighlightButtonStyle())
                        }
                    } else {
                        Text("Connected to EMGBLE2!")
                            .font(.headline)
                            .foregroundColor(.green)
                    }
                    
                    // Bluetooth Status
                    VStack {
                        Text("STATUS")
                            .font(.headline)
                        
                        if bleManager.BLEisOn {
                            Text("Bluetooth is switched on")
                                .foregroundColor(.green)
                        } else {
                            Text("Bluetooth is NOT switched on")
                                .foregroundColor(.red)
                        }
                        
                        // Display the reconnection attempts
                        if bleManager.reconnectionAttempts > 0 {
                            Text("Reconnection Attempts: \(bleManager.reconnectionAttempts)/\(bleManager.maxReconnectionAttempts)")
                                .foregroundColor(bleManager.reconnectionAttempts >= bleManager.maxReconnectionAttempts ? .red : .orange)
                                .font(.subheadline)
                        }
                    }
                }
                
                
                
                // Controls Section
                VStack(spacing: 15) {
                    HStack(spacing: 10) { // ‚úÖ Reduced spacing between columns
                        
                        // Column 1: BLE Scanning & Sensor Control
                        VStack(spacing: 10) {
                            Button("Start Scanning") { bleManager.startScanning() }
                                .disabled(bleManager.isConnected)
                                .buttonStyle(HighlightButtonStyle())
                            
                            Button("Stop Scanning") { bleManager.stopScanning() }
                                .disabled(!bleManager.BLEisOn || bleManager.isConnected)
                                .buttonStyle(HighlightButtonStyle())
                            
                            Button("Reconnect") {
                                if let firstPeripheral = bleManager.BLEPeripherals.first {
                                    print("üîÑ Manual reconnection initiated...")
                                    bleManager.reconnectionAttempts = 0 // Reset attempts
                                    bleManager.connectSensor(p: firstPeripheral)
                                } else {
                                    print("‚ö†Ô∏è No known sensors available for reconnection.")
                                    bleManager.startScanning()
                                }
                            }
                            .disabled(bleManager.isConnected)
                            .buttonStyle(HighlightButtonStyle())
                        }
                        .frame(minWidth: 0, maxWidth: .infinity)// ‚úÖ Align left
                        .padding(.horizontal, 10) // ‚úÖ Adds space from screen edges
                        
                        // Column 2: Recording & Export
                        VStack(spacing: 10) {
                            Button("Start Recording") {
                                DispatchQueue.global(qos: .background).async {
                                    emgGraph.record()
                                    DispatchQueue.main.async {
                                        print("Recording started.")
                                    }
                                }
                            }
                            .buttonStyle(HighlightButtonStyle())
                            
                            Button("Stop Recording") {
                                DispatchQueue.global(qos: .background).async {
                                    let fileContent = emgGraph.stop_recording_and_save()
                                    DispatchQueue.main.async {
                                        file_content.text = fileContent
                                        print("Recording stopped and saved.")
                                        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
                                            showingExporter = true
                                        }
                                    }
                                }
                            }
                            .buttonStyle(HighlightButtonStyle())
                            
                            Button("Export last") {
                                guard !isExporting else {
                                    print("‚ö†Ô∏è Export already in progress.")
                                    return
                                }
                                isExporting = true
                                DispatchQueue.main.asyncAfter(deadline: .now() + 1) {
                                    isExporting = false
                                }
                                
                                if file_content.text.isEmpty {
                                    print("‚ö†Ô∏è No data available to export.")
                                } else {
                                    print("üîπ Preparing to export file...")
                                    showingExporter = true
                                }
                                isExporting = false
                            }
                            .buttonStyle(HighlightButtonStyle())
                        }
                        .frame(minWidth: 0, maxWidth: .infinity) // ‚úÖ Equal width for each column
                               .padding(.horizontal, 5)
                        
                        // Column 3: Graph Reset & Refresh
                        VStack(spacing: 10) {
                            Button("Reset Graphs") {
                                emgGraph.resetGraph()
                                DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
                                    emgGraph.objectWillChange.send()
                                }
                            }
                            .buttonStyle(HighlightButtonStyle())
                            
                            Button("Refresh Graphs") {
                                emgGraph.objectWillChange.send()
                            }
                            .buttonStyle(HighlightButtonStyle())
                            
                            Button(action: startCalibration) {
                                Text(isCalibrating ? "Calibrating... \(calibrationTimeRemaining)s" : "Calibration MVE")
                                    .padding()
                                    .frame(minWidth: 110, maxWidth: 150)
                                    .fixedSize(horizontal: false, vertical: true)
                                    .multilineTextAlignment(.center) // ‚úÖ Ensures text is properly centered
                                    .minimumScaleFactor(0.5) // ‚úÖ Shrinks text instead of overflowing
                            }
                            .disabled(isCalibrating)
                            .buttonStyle(HighlightButtonStyle())
                        }
                        .frame(minWidth: 0, maxWidth: .infinity) // ‚úÖ Equal width for each column
                              .padding(.horizontal, 5) // ‚úÖ Adds space from screen edges
                    }
                    .padding(.horizontal, 10) // ‚úÖ Adds space from screen edges
                }
            }
        }
        
        .fileExporter(
            isPresented: $showingExporter,
            document: file_content,
            contentType: .commaSeparatedText,
            defaultFilename: "emg-data"
        ) { result in
            DispatchQueue.main.async {
                switch result {
                case .success(let url):
                    print("‚úÖ File successfully saved to: \(url)")
                    showingExporter = false
                case .failure(let error):
                    print("‚ùå Failed to save file: \(error.localizedDescription)")
                    showingExporter = false
                }
            }
        }
        .frame(maxWidth: .infinity, maxHeight: .infinity)
        .alert(isPresented: $bleManager.showAlert) {
            Alert(
                title: Text("Connection Error"),
                message: Text(bleManager.alertMessage),
                dismissButton: .default(Text("OK")) {
                    bleManager.reconnectionAttempts = 0  // ‚úÖ Reset reconnection attempts after user acknowledges
                }
            )
        }
        .padding(.vertical, 10)
        
        .frame(maxWidth: .infinity, maxHeight: .infinity) // Ensures full width
        .padding(.horizontal, 20)  // Ensures UI isn't too close to edges
        .padding(.bottom, 10)  // Adds spacing at the bottom
        .actionSheet(isPresented: $showingDeviceSelection) {
            ActionSheet(
                title: Text("Available Sensors"),
                message: Text("Tap a device to connect"),
                buttons: bleManager.BLEPeripherals.map { peripheral in
                        .default(Text(peripheral.name)) {
                            bleManager.connectSensor(p: peripheral)
                        }
                } + [.cancel()]
            )
        }
    }
    
}

